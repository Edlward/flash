#
# Generated by erpcgen 1.9.1 on Wed Sep  7 14:36:25 2022.
#
# AUTOGENERATED - DO NOT EDIT
#

import erpc
from . import common, interface

# Client for QSPIService
class QSPIServiceService(erpc.server.Service):
    def __init__(self, handler):
        super(QSPIServiceService, self).__init__(interface.IQSPIService.SERVICE_ID)
        self._handler = handler
        self._methods = {
                interface.IQSPIService.SECTORERASE_ID: self._handle_sectorErase,
                interface.IQSPIService.PAGEREAD_ID: self._handle_pageRead,
                interface.IQSPIService.PAGEWRITE_ID: self._handle_pageWrite,
                interface.IQSPIService.CHIPSELECT_ID: self._handle_chipSelect,
                interface.IQSPIService.CHIPINITIAL_ID: self._handle_chipInitial,
                interface.IQSPIService.READCURRENT_ID: self._handle_readCurrent,
            }

    def _handle_sectorErase(self, sequence, codec):
        # Read incoming parameters.
        addr = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.sectorErase(addr)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.SECTORERASE_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_pageRead(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        data = erpc.Reference()

        # Read incoming parameters.
        addr = codec.read_uint32()

        # Invoke user implementation of remote function.
        _result = self._handler.pageRead(addr, data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.PAGEREAD_ID,
            sequence=sequence))
        if data.value is None:
            raise ValueError("data.value is None")
        for _i0 in data.value:
            codec.write_uint8(_i0)

        codec.write_int32(_result)

    def _handle_pageWrite(self, sequence, codec):
        # Read incoming parameters.
        addr = codec.read_uint32()
        data = []
        for _i0 in range(256):
            _v0 = codec.read_uint8()
            data.append(_v0)


        # Invoke user implementation of remote function.
        _result = self._handler.pageWrite(addr, data)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.PAGEWRITE_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_chipSelect(self, sequence, codec):
        # Read incoming parameters.
        chip = codec.read_uint8()

        # Invoke user implementation of remote function.
        _result = self._handler.chipSelect(chip)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.CHIPSELECT_ID,
            sequence=sequence))
        codec.write_int32(_result)

    def _handle_chipInitial(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        result = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.chipInitial(result)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.CHIPINITIAL_ID,
            sequence=sequence))
        if result.value is None:
            raise ValueError("result.value is None")
        codec.write_uint8(result.value)
        codec.write_int32(_result)

    def _handle_readCurrent(self, sequence, codec):
        # Create reference objects to pass into handler for out/inout parameters.
        current = erpc.Reference()

        # Read incoming parameters.

        # Invoke user implementation of remote function.
        _result = self._handler.readCurrent(current)

        # Prepare codec for reply message.
        codec.reset()

        # Construct reply message.
        codec.start_write_message(erpc.codec.MessageInfo(
            type=erpc.codec.MessageType.kReplyMessage,
            service=interface.IQSPIService.SERVICE_ID,
            request=interface.IQSPIService.READCURRENT_ID,
            sequence=sequence))
        if current.value is None:
            raise ValueError("current.value is None")
        codec.write_float(current.value)
        codec.write_int32(_result)


